import React, { useState } from "react";
import { FiPlus, FiX } from "react-icons/fi";
import { useDispatch, useSelector } from "react-redux";
import { setIsFabOpen } from "../features/user/userSlice";
import FabCard from "./FabCard";

const Fab = () => {
	const isFabOpen = useSelector((state) => state.user.isFabOpen);
	const [selectedOption, setSelectedOption] = useState(null);
	const dispatch = useDispatch();

	const options = [
		{
			id: 1,
			logo: (
				<svg
					width='23'
					height='24'
					viewBox='0 0 23 24'
					fill='none'
					xmlns='http://www.w3.org/2000/svg'>
					<path
						d='M0.453613 12.002V24.002H2.15674H2.85986V19.6285V15.2504L3.2208 15.0723C5.46611 13.9801 8.00205 13.8676 10.2661 14.7676C10.5286 14.8707 11.1896 15.1848 11.7333 15.466C12.2817 15.7473 12.938 16.0613 13.2005 16.1645C15.4411 17.0551 17.8036 17.1254 20.0864 16.3707C20.5083 16.2301 21.0614 15.9957 21.6333 15.7051L22.5239 15.2598L22.538 8.07852L22.5474 0.897264L21.9755 1.23008C20.0208 2.35039 18.6567 2.76758 16.9224 2.76758C16.1255 2.76758 15.4646 2.6832 14.7239 2.48164C13.9599 2.28008 13.4864 2.0832 12.1646 1.4082C10.9317 0.784765 10.3692 0.559765 9.45049 0.330078C8.02549 -0.030859 6.39424 -0.0496101 4.93643 0.278515C4.39736 0.400391 3.71299 0.616016 3.23018 0.822266L2.85986 0.976952V0.489452V0.00195312H2.15674H0.453613V12.002Z'
						fill='#0F0F0F'
					/>
				</svg>
			),
			label: "Report an issue",
		},
		{
			id: 2,
			logo: (
				<svg
					width='36'
					height='36'
					viewBox='0 0 36 36'
					fill='none'
					xmlns='http://www.w3.org/2000/svg'>
					<path
						d='M26.7269 33.7216C27.2761 33.5772 27.4627 33.1301 27.519 31.7994C27.5437 31.303 27.5718 31.0073 27.6246 30.796C27.7197 30.4053 28.0154 29.8068 28.3182 29.4054C28.7406 28.8421 29.5715 28.0747 30.2192 27.6452L30.3706 27.5466V22.8925V18.2348L29.9798 18.0693C28.9378 17.6293 27.5824 17.2737 26.1636 17.0695C25.118 16.9181 24.4421 16.8794 22.8544 16.8759C21.3828 16.8724 21.3335 16.8759 21.0659 16.9533C20.0274 17.2526 19.267 17.9778 18.9677 18.9495C18.9255 19.0833 18.6896 20.3436 18.4432 21.7483C18.0172 24.1951 17.9996 24.3218 17.9996 24.7759C18.0031 25.1878 18.0172 25.2935 18.0982 25.5681C18.3728 26.4764 19.01 27.184 19.8655 27.5255C20.3618 27.7261 20.4745 27.7332 22.5903 27.7332H24.5195L24.3963 28.0782C24.1112 28.8773 23.9844 29.6554 23.9844 30.62C23.9844 31.3664 24.0232 31.6163 24.1992 32.0564C24.3541 32.4472 24.5231 32.7006 24.8399 33.014C25.1532 33.3273 25.4454 33.5104 25.8538 33.6512C26.0756 33.7286 26.5579 33.7674 26.7269 33.7216Z'
						fill='#0F0F0F'
					/>
					<path
						d='M35.0923 28.2406C35.476 28.1244 35.814 27.7794 35.9337 27.3816C36.0041 27.1563 36.0041 27.0647 35.997 22.5937L35.9865 18.0346L35.8703 17.7987C35.7295 17.51 35.4513 17.246 35.1662 17.1298C34.969 17.0488 34.9409 17.0488 33.7509 17.0488C32.561 17.0488 32.5329 17.0488 32.3357 17.1298C32.0506 17.246 31.7724 17.51 31.6316 17.7987L31.5154 18.0346L31.5049 22.5937C31.4978 27.0647 31.4978 27.1563 31.5682 27.3816C31.6915 27.7899 32.0259 28.1244 32.4237 28.2441C32.6772 28.318 34.8493 28.318 35.0923 28.2406Z'
						fill='#0F0F0F'
					/>
					<path
						d='M9.2731 2.27841C8.72391 2.42275 8.53732 2.86986 8.48099 4.20061C8.45635 4.69701 8.42819 4.99273 8.37538 5.20396C8.28032 5.59474 7.9846 6.19323 7.68184 6.59457C7.25938 7.15786 6.42855 7.92533 5.78078 8.35483L5.62939 8.45341V13.1075V17.7652L6.02017 17.9307C7.06223 18.3707 8.41762 18.7263 9.83638 18.9305C10.882 19.0819 11.5579 19.1206 13.1456 19.1241C14.6172 19.1276 14.6665 19.1241 14.9341 19.0467C15.9726 18.7474 16.733 18.0222 17.0323 17.0505C17.0745 16.9167 17.3104 15.6564 17.5568 14.2517C17.9828 11.8049 18.0004 11.6782 18.0004 11.2241C17.9969 10.8122 17.9828 10.7065 17.9018 10.4319C17.6272 9.52365 16.99 8.81602 16.1345 8.47453C15.6382 8.27386 15.5255 8.26682 13.4097 8.26682H11.4805L11.6037 7.92181C11.8888 7.12265 12.0156 6.34461 12.0156 5.37999C12.0156 4.63364 11.9768 4.38368 11.8008 3.94362C11.6459 3.55284 11.4769 3.29936 11.1601 2.98603C10.8468 2.67271 10.5546 2.48964 10.1462 2.34882C9.92439 2.27137 9.44209 2.23264 9.2731 2.27841Z'
						fill='#0F0F0F'
					/>
					<path
						d='M0.907743 7.75943C0.52401 7.8756 0.186042 8.22061 0.0663457 8.61843C-0.00406416 8.84375 -0.00406416 8.93528 0.00297682 13.4063L0.0135383 17.9654L0.129715 18.2013C0.270534 18.49 0.548653 18.754 0.833813 18.8702C1.03096 18.9512 1.05912 18.9512 2.24905 18.9512C3.43898 18.9512 3.46714 18.9512 3.66429 18.8702C3.94945 18.754 4.22757 18.49 4.36839 18.2013L4.48456 17.9654L4.49512 13.4063C4.50217 8.93528 4.50217 8.84375 4.43176 8.61843C4.30854 8.21005 3.97409 7.8756 3.57628 7.75591C3.3228 7.68197 1.15066 7.68197 0.907743 7.75943Z'
						fill='#0F0F0F'
					/>
				</svg>
			),
			label: "Share Feedback",
		},
		{
			id: 3,
			logo: (
				<svg
					width='36'
					height='36'
					viewBox='0 0 48 48'
					fill='none'
					xmlns='http://www.w3.org/2000/svg'>
					<path
						d='M8 12V15.5756H27.6658V12H8ZM8 19.1512V22.7268H27.6658V19.1512H8ZM38.3926 19.33C38.2138 19.33 37.8562 19.5088 37.6775 19.6875L35.8897 21.4753L39.644 25.2297L41.4318 23.4419C41.7894 23.0843 41.7894 22.3692 41.4318 22.0117L39.1077 19.6875C38.9289 19.5088 38.7501 19.33 38.3926 19.33ZM34.9958 22.548L24.0902 33.2748V37.0292H27.8446L38.7501 26.1236L34.9958 22.548ZM8 26.3024V29.878H20.5146V26.3024H8Z'
						fill='#0F0F0F'
					/>
				</svg>
			),
			label: "Give Suggestion",
		},
		{
			id: 4,
			logo: (
				<svg
					width='28'
					height='28'
					viewBox='0 0 28 28'
					fill='none'
					xmlns='http://www.w3.org/2000/svg'>
					<g clipPath='url(#clip0_3249_3515)'>
						<path
							d='M2.97895 0.0395927C2.69728 0.0829277 2.12853 0.288759 1.81436 0.45126C1.38645 0.678759 0.676862 1.38834 0.449362 1.81626C0.357279 1.99501 0.221862 2.30917 0.151445 2.52042L0.0268619 2.89959V7.47667C0.0268619 12.4329 0.0214452 12.2975 0.324779 12.98C0.720195 13.8575 1.6302 14.67 2.4752 14.8921L2.7027 14.9517L2.71895 16.0783C2.7352 17.3296 2.7677 17.4433 3.10353 17.6546C3.3202 17.79 3.6777 17.8062 3.88895 17.6925C3.9702 17.6492 4.60936 17.0371 5.30811 16.3383L6.58103 15.06H6.8302H7.08478L7.11186 13.7979C7.13353 12.7092 7.14978 12.4871 7.2527 12.1404C7.77811 10.3583 9.09978 9.03666 10.8873 8.495C11.2881 8.37583 11.326 8.37583 15.1556 8.35417L19.0123 8.33791V5.7C19.0123 2.80751 19.0014 2.68834 18.6819 2.02209C18.346 1.31792 17.7664 0.738342 17.0352 0.375427C16.2498 -0.0145721 16.5748 0.00167656 9.47895 0.0125103C5.97978 0.0125103 3.05478 0.0287609 2.97895 0.0395927Z'
							fill='black'
						/>
						<path
							d='M11.3314 10.0772C10.1072 10.3967 9.14308 11.3772 8.8235 12.6121C8.726 12.9967 8.72058 13.2459 8.72058 17.4438C8.72058 20.3309 8.74225 21.9776 8.78016 22.1888C8.80725 22.3621 8.94808 22.7413 9.0835 23.023C9.506 23.895 10.2643 24.545 11.2393 24.8755L11.6185 25L16.3852 25.0163L21.1518 25.0325L22.4789 26.3488C23.8927 27.7571 23.9522 27.8005 24.3693 27.7084C24.5589 27.6705 24.8297 27.4592 24.9327 27.2805C24.976 27.2046 25.0085 26.7821 25.0247 26.0346L25.0518 24.9025L25.2685 24.8375C25.6314 24.7292 26.1352 24.4475 26.4818 24.1605C27.0939 23.6513 27.5597 22.8117 27.6789 22.0155C27.7114 21.7934 27.7331 19.9138 27.7331 17.3896C27.7331 12.6338 27.7385 12.7096 27.3593 11.9459C26.9964 11.2147 26.4168 10.6351 25.7127 10.2992C24.9977 9.95799 25.3064 9.96882 18.1997 9.97424C12.0031 9.97424 11.7106 9.97965 11.3314 10.0772Z'
							fill='black'
						/>
						<path
							d='M18.6363 18.1736C18.5906 18.1829 18.5496 18.2077 18.5201 18.2438C18.4906 18.2799 18.4745 18.3251 18.4745 18.3717V18.8067C18.4745 18.8872 18.4426 18.9643 18.3857 19.0212C18.3288 19.0781 18.2516 19.11 18.1712 19.11C18.0907 19.11 18.0136 19.0781 17.9567 19.0212C17.8998 18.9643 17.8679 18.8872 17.8679 18.8067V17.9327C17.8679 17.856 17.897 17.7821 17.9493 17.7259C18.0017 17.6698 18.0734 17.6356 18.1499 17.6302C18.5095 17.6051 19.0383 17.4826 19.4674 17.209C19.8862 16.9416 20.1934 16.5447 20.1934 15.9443C20.1934 15.3659 19.9788 14.9649 19.6672 14.699C19.3481 14.4266 18.904 14.2774 18.4272 14.2588C17.4402 14.2202 16.5203 14.7259 16.3439 15.5134C16.3264 15.5919 16.2783 15.6602 16.2104 15.7033C16.1424 15.7464 16.0602 15.7607 15.9816 15.7432C15.9031 15.7256 15.8348 15.6776 15.7917 15.6096C15.7486 15.5417 15.7343 15.4594 15.7518 15.3809C15.8865 14.7795 16.275 14.3393 16.7779 14.0511C17.2834 13.7613 17.8964 13.6309 18.4511 13.6527C19.031 13.6754 19.6158 13.8576 20.0611 14.2376C20.5141 14.6242 20.8 15.1969 20.8 15.9443C20.8 16.8013 20.341 17.3712 19.7938 17.7204C19.4233 17.9568 19.0049 18.0987 18.6363 18.1736ZM17.6656 20.6267C17.6656 20.4658 17.7295 20.3115 17.8433 20.1977C17.9571 20.0839 18.1114 20.02 18.2723 20.02C18.4332 20.02 18.5875 20.0839 18.7013 20.1977C18.815 20.3115 18.8789 20.4658 18.8789 20.6267C18.8789 20.7876 18.815 20.9419 18.7013 21.0557C18.5875 21.1694 18.4332 21.2333 18.2723 21.2333C18.1114 21.2333 17.9571 21.1694 17.8433 21.0557C17.7295 20.9419 17.6656 20.7876 17.6656 20.6267Z'
							fill='#F8F8F8'
							stroke='#F8F8F8'
							strokeWidth='0.404439'
							strokeLinecap='round'
							strokeLinejoin='round'
						/>
					</g>
					<defs>
						<clipPath id='clip0_3249_3515'>
							<rect width='27.7333' height='27.7333' fill='white' />
						</clipPath>
					</defs>
				</svg>
			),
			label: "Contact Us",
		},
	];

	const handleOptionClick = (option) => {
		setSelectedOption(option);
	};
	// const handleCardClose = () => {
	// 	setSelectedOption(null);
	// };

	return (
		<>
			<div className='fixed bottom-24 right-8'>
				{selectedOption ? <FabCard selectedOption={selectedOption} /> : null}
				{isFabOpen || selectedOption ? (
					<div className='flex flex-col gap-2 w-full'>
						{options.map((option) => (
							<div
								key={option.id}
								className='flex items-center justify-end w-full gap-2'>
								<div
									className={`flex items-center px-3 py-1 rounded-t-lg rounded-bl-lg shadow-lg ${
										selectedOption === option
											? "bg-gray-800 text-white"
											: "bg-white text-gray-900"
									}`}
									onClick={() => handleOptionClick(option)}>
									<span>{option.label}</span>
								</div>
								<button
									className={`flex items-center justify-center w-12 h-12 p-2 rounded-full shadow-lg ${
										selectedOption === option
											? "bg-gray-800 text-white"
											: "bg-gray-100 text-gray-900"
									}`}
									onClick={() => handleOptionClick(option)}>
									{option.logo}
								</button>
							</div>
						))}
					</div>
				) : (
					<></>
				)}
			</div>
			<button
				className='fixed bottom-6 right-6 lg:bottom-8 lg:right-8 z-10 flex items-center justify-center w-12 h-12 bg-[#F8F8F8] text-gray-900 rounded-full shadow-lg'
				style={{
					boxShadow: "1px 1px 8px rgba(0, 0, 0, 0.5)", // Shadow for icon and text
					borderColor: isFabOpen ? "#808080" : "transparent", // Border color for ellipse
					overflow: "hidden", // Ensure overflow doesn't show when ellipse is applied
				}}
				onClick={() => {
					dispatch(setIsFabOpen(!isFabOpen));
					selectedOption ? setSelectedOption(null) : null;
				}}>
				{isFabOpen ? (
					<FiX className='w-8 h-8' style={{ color: "#0F0F0F" }} /> // Icon color change
				) : (
					<img
						src='/writer.png'
						className='w-6 h-6 absolute'
						alt=''
						style={{ color: "#F8F8F8" }}
					/> // Icon color change
				)}
			</button>
		</>
	);
};

export default Fab;
